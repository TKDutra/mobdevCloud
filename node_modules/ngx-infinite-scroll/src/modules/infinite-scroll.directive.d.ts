import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { IInfiniteScrollEvent, IInfiniteScrollAction } from '../models';
import * as ɵngcc0 from '@angular/core';
export declare class InfiniteScrollDirective implements OnDestroy, OnChanges, AfterViewInit {
    private element;
    private zone;
    scrolled: EventEmitter<IInfiniteScrollEvent>;
    scrolledUp: EventEmitter<IInfiniteScrollEvent>;
    infiniteScrollDistance: number;
    infiniteScrollUpDistance: number;
    infiniteScrollThrottle: number;
    infiniteScrollDisabled: boolean;
    infiniteScrollContainer: any;
    scrollWindow: boolean;
    immediateCheck: boolean;
    horizontal: boolean;
    alwaysCallback: boolean;
    fromRoot: boolean;
    private disposeScroller;
    constructor(element: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }: SimpleChanges): void;
    setup(): void;
    handleOnScroll({ type, payload }: IInfiniteScrollAction): void;
    ngOnDestroy(): void;
    destroyScroller(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InfiniteScrollDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InfiniteScrollDirective, "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", never, { "infiniteScrollDistance": "infiniteScrollDistance"; "infiniteScrollUpDistance": "infiniteScrollUpDistance"; "infiniteScrollThrottle": "infiniteScrollThrottle"; "infiniteScrollDisabled": "infiniteScrollDisabled"; "infiniteScrollContainer": "infiniteScrollContainer"; "scrollWindow": "scrollWindow"; "immediateCheck": "immediateCheck"; "horizontal": "horizontal"; "alwaysCallback": "alwaysCallback"; "fromRoot": "fromRoot"; }, { "scrolled": "scrolled"; "scrolledUp": "scrolledUp"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJpbmZpbml0ZS1zY3JvbGwuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJSW5maW5pdGVTY3JvbGxFdmVudCwgSUluZmluaXRlU2Nyb2xsQWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEluZmluaXRlU2Nyb2xsRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgc2Nyb2xsZWQ6IEV2ZW50RW1pdHRlcjxJSW5maW5pdGVTY3JvbGxFdmVudD47XG4gICAgc2Nyb2xsZWRVcDogRXZlbnRFbWl0dGVyPElJbmZpbml0ZVNjcm9sbEV2ZW50PjtcbiAgICBpbmZpbml0ZVNjcm9sbERpc3RhbmNlOiBudW1iZXI7XG4gICAgaW5maW5pdGVTY3JvbGxVcERpc3RhbmNlOiBudW1iZXI7XG4gICAgaW5maW5pdGVTY3JvbGxUaHJvdHRsZTogbnVtYmVyO1xuICAgIGluZmluaXRlU2Nyb2xsRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW5maW5pdGVTY3JvbGxDb250YWluZXI6IGFueTtcbiAgICBzY3JvbGxXaW5kb3c6IGJvb2xlYW47XG4gICAgaW1tZWRpYXRlQ2hlY2s6IGJvb2xlYW47XG4gICAgaG9yaXpvbnRhbDogYm9vbGVhbjtcbiAgICBhbHdheXNDYWxsYmFjazogYm9vbGVhbjtcbiAgICBmcm9tUm9vdDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGRpc3Bvc2VTY3JvbGxlcjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKHsgaW5maW5pdGVTY3JvbGxDb250YWluZXIsIGluZmluaXRlU2Nyb2xsRGlzYWJsZWQsIGluZmluaXRlU2Nyb2xsRGlzdGFuY2UgfTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgc2V0dXAoKTogdm9pZDtcbiAgICBoYW5kbGVPblNjcm9sbCh7IHR5cGUsIHBheWxvYWQgfTogSUluZmluaXRlU2Nyb2xsQWN0aW9uKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGRlc3Ryb3lTY3JvbGxlcigpOiB2b2lkO1xufVxuIl19